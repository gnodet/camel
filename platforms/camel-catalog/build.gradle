/*
 * This file was generated by the Gradle 'init' task.
 */

dependencies {
    compile project(':camel-parent:tooling:json-simple-ordered')
    testCompile 'com.fasterxml.jackson.core:jackson-databind:2.9.7'
    testCompile project(':camel-parent:camel-core')
    testCompile project(':camel-parent:components:camel-jsonpath')
    testCompile 'org.apache.activemq:activemq-camel:5.16.0-SNAPSHOT'
    testCompile 'junit:junit:4.12'
    testCompile 'org.apache.logging.log4j:log4j-api:2.11.1'
    testCompile 'org.apache.logging.log4j:log4j-core:2.11.1'
    testCompile 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.1'
}

task generate {
    dependencies {
        compile project(':camel-parent:tooling:maven-plugins:camel-package-maven-plugin')
    }
    dependsOn ':camel-parent:tooling:maven-plugins:camel-package-maven-plugin:jar'
    outputs.dir("$buildDir/generated/main/resources")
    doLast {
        def files = project.configurations.compileClasspath.collect { it.toURI().toURL() }
        def cl = new URLClassLoader(files.toArray(new URL[0]), project.getClass().getClassLoader())
        def cp = project.configurations.compileClasspath.collect { it.toString() } \
            + file("$buildDir/classes/java/main").toString()
        def generator = cl.loadClass('org.apache.camel.tooling.packaging.gradle.GradleGenerator').newInstance()
        generator.groupId = project.group
        generator.artifactId = project.name
        generator.version = project.version
        generator.classpath = cp
        generator.basedir = project.projectDir.toPath()
        generator.sources = [ file('src/main/java').toString(), file("$buildDir/generated/main/java").toString() ]
        generator.resources = [ file('src/main/resources').toString(), file("$buildDir/generated/main/resources").toString() ]
        generator.outputDirectory = "$buildDir/classes/java/main"
        generator.rootDir = file("${project.rootDir}").toPath()
        def rd = [ project(':camel-parent:camel-core').buildDir.toPath().resolve('generated/main/resources') ]
        rd += project(':camel-parent:components').subprojects.collect { it.buildDir.toPath().resolve('generated/main/resources') }
        generator.processCatalog rd, file("$buildDir/generated/main/resources")
    }
}


task generate1(type: Copy) {
    from("${project.rootDir}/camel-api/src/main/java/org/apache/camel/runtimecatalog") {
        include "EndpointValidationResult.java"
        include "JSonSchemaResolver.java"
        include "LanguageValidationResult.java"
        filter { line ->
            line.replaceAll("org.apache.camel.runtimecatalog.impl", "org.apache.camel.catalog")
                .replaceAll("org.apache.camel.runtimecatalog", "org.apache.camel.catalog")
        }
    }
    into "${buildDir}/generated/main/java/org/apache/camel/catalog"
}
task generate2(type: Copy) {
    from ("${project.rootDir}/camel-core/src/main/java/org/apache/camel/runtimecatalog/impl") {
        include "AbstractCamelCatalog.java"
        include "CamelContextJsonSchemaResolver.java"
        include "CatalogHelper.java"
        include "JSonSchemaHelper.java"
        include "SuggestionStrategy.java"
        include "TimePatternConverter.java"
        include "UnsafeUriCharactersEncoder.java"
        include "URISupport.java"
        filter { line ->
            line.replaceAll("org.apache.camel.runtimecatalog.impl", "org.apache.camel.catalog")
                .replaceAll("org.apache.camel.runtimecatalog", "org.apache.camel.catalog")
        }
    }
    into "${buildDir}/generated/main/java/org/apache/camel/catalog"
}
compileJava.dependsOn generate1, generate2
project.sourceSets.main.java.srcDir file("$buildDir/generated/main/java")

description = 'Camel :: Platforms :: Camel Catalog'
