package org.apache.camel.gradle;

import org.gradle.api.DefaultTask;
import org.gradle.api.file.FileCollection;
import org.gradle.api.tasks.InputDirectory;
import org.gradle.api.tasks.OutputDirectory;
import org.gradle.api.tasks.TaskAction;

import java.io.Writer;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.List;
import java.util.Properties;
import java.util.stream.Collectors;

public class PackageComponent extends DefaultTask {

    @InputDirectory
    Path inputDirectory;

    @OutputDirectory
    Path outputDirectory;

    public Path getInputDirectory() {
        return inputDirectory;
    }

    public void setInputDirectory(Path inputDirectory) {
        this.inputDirectory = inputDirectory;
    }

    public Path getOutputDirectory() {
        return outputDirectory;
    }

    public void setOutputDirectory(Path outputDirectory) {
        this.outputDirectory = outputDirectory;
    }

    @TaskAction
    public void run() throws Exception {
        Path camelOutputMetaDir = outputDirectory.resolve("META-INF/services/org/apache/camel/");
        Path camelInputMetaDir = inputDirectory.resolve("META-INF/services/org/apache/camel/");
        Path componentsDir = camelInputMetaDir.resolve("component");
        if (Files.isDirectory(componentsDir)) {
            String components = Files.walk(componentsDir)
                    .filter(Files::isRegularFile)
                    .map(p -> p.getFileName().toString())
                    .filter(n -> !n.startsWith("."))
                    .collect(Collectors.joining(" "));
            if (!components.isEmpty()) {
                Properties properties = new Properties();
                properties.put("components", components);
                properties.put("groupId", getProject().getGroup());
                properties.put("artifactId", getProject().getName());
                properties.put("version", getProject().getVersion());
                if (getProject().getDescription() != null) {
                    properties.put("projectName", getProject().getDescription());
                } else {
                    properties.put("projectName", getProject().getName());
                }
                Files.createDirectories(camelOutputMetaDir);
                Path outFile = camelOutputMetaDir.resolve("component.properties");
                try (Writer w = Files.newBufferedWriter(outFile)) {
                    properties.store(w, "# Generated by gradle");
                }
                getLogger().info("Generated " + outFile + " containing Camel components: " + components);
            }
        }
    }

}