/*
 * This file was generated by the Gradle 'init' task.
 */

subprojects {
    task generateApi {
        dependencies {
            compile project(':camel-parent:tooling:maven-plugins:camel-api-component-maven-plugin')
        }
        inputs.files(fileTree('src/main/api'))
        outputs.dir("$buildDir/generated/main/java")
        outputs.dir("$buildDir/generated/test/java")
        dependsOn ':camel-parent:tooling:maven-plugins:camel-api-component-maven-plugin:jar'
        afterEvaluate { project ->
            if (project.file('src/main/api').isDirectory()) {
                doLast {
                    def files = sourceSets.main.compileClasspath.collect { it.toURI().toURL() }
                    def cl = new URLClassLoader(files.toArray(new URL[0]), project.getClass().getClassLoader())
                    def cp = project.configurations.runtime.collect { it.toString() }
                    def generator = cl.loadClass('org.apache.camel.tooling.apigen.gradle.GradleGenerator').newInstance()
                    generator.classpath = cp
                    generator.basedir = project.projectDir.toPath()
                    generator.testSourceDirectory = project.file('src/test/java').toPath()
                    if (project.ext.has('scheme')) generator.scheme = project.scheme
                    if (project.ext.has('outPackage')) generator.outPackage = project.outPackage
                    if (project.ext.has('componentName')) generator.componentName = project.componentName
                    if (project.ext.has('componentPackage')) generator.componentPackage = project.componentPackage
                    logger.info("Generating api $project.name")
                    generator.fromApis project.file("src/main/api"), \
                                       file("$buildDir/generated/main/java"), \
                                       file("$buildDir/generated/test/java")
                }
            }
        }
        project.sourceSets.main.java.srcDir file("$buildDir/generated/main/java")
        project.sourceSets.test.java.srcDir file("$buildDir/generated/test/java")
    }
    compileJava.dependsOn 'generateApi'
    task generate {
        dependencies {
            compile project(':camel-parent:tooling:maven-plugins:camel-package-maven-plugin')
        }
        dependsOn ':camel-parent:tooling:maven-plugins:camel-package-maven-plugin:jar', 'compileJava'
        inputs.files(fileTree('src/main/java'))
        outputs.dir("$buildDir/generated/main/resources")
        doLast {
            def files = project.configurations.compileClasspath.collect { it.toURI().toURL() }
            def cl = new URLClassLoader(files.toArray(new URL[0]), project.getClass().getClassLoader())
            def cp = project.configurations.compileClasspath.collect { it.toString() } \
                + file("$buildDir/classes/java/main").toString()
            def generator = cl.loadClass('org.apache.camel.tooling.packaging.gradle.GradleGenerator').newInstance()
            generator.groupId = project.group
            generator.artifactId = project.name
            generator.version = project.version
            generator.classpath = cp
            generator.basedir = project.projectDir.toPath()
            generator.sources = [ file('src/main/java').toString(), file("$buildDir/generated/main/java").toString() ]
            generator.resources = [ file('src/main/resources').toString(), file("$buildDir/generated/main/resources").toString() ]
            generator.outputDirectory = "$buildDir/classes/java/main"
            generator.rootDir = file("${project.rootDir}").toPath()
            generator.processComponent file("$buildDir/generated/main/resources")
        }
    }
    task copyGeneratedResources(type: Copy) {
        dependsOn 'generate'
        inputs.files(fileTree("$buildDir/generated/main/resources"))
        outputs.dir("$buildDir/classes/java/main")
        from file("$buildDir/generated/main/resources")
        into file("$buildDir/classes/java/main")
    }
    jar.dependsOn 'copyGeneratedResources'
    test {
        systemProperty "buildDir", "$buildDir"
    }
}

description = 'Camel :: Components'
