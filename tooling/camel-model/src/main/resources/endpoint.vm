#set( $newline="
")
#macro( propJavadoc $prop )
        ${main.javadoc(${prop.description} + ${newline} + "This property is of type <code>" + ${prop.type} + "</code>.", "        ")}
#end
#macro( property $prop $class )
        #propJavadoc( $prop )
        default $class ${prop.name}(${main.getType($prop.type)} ${prop.name}) {
            doSetProperty("${prop.name}", ${prop.name});
            return this;
        }
#if( ${main.getType($prop.type)} != "String" )
        #propJavadoc( $prop )
        default $class ${prop.name}(String ${prop.name}) {
            doSetProperty("${prop.name}", ${prop.name});
            return this;
        }
#end
#end
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.endpoints;

#foreach( $imp in ${main.getImports(${endpoint})} )
import ${imp};
#end

/**
 * ${endpoint.description}
 *
 * Generated by camel meta-model tooling
 */
@javax.annotation.Generated("org.apache.camel.metamodel")
public interface ${name}EndpointBuilderFactory {

#foreach( $en in ${main.getEnums($endpoint).entrySet()} )
    enum ${en.key} {
#set( $cplx = false )
#foreach( $v in ${en.value} )
#if( ${v.contains(":")} )
#set( $cplx = true )
#end
#end
#if( $cplx )
#foreach( $v in ${en.value} )
        ${v.substring(0, ${v.indexOf(":")})}("${v.substring(${v.indexOf(":")}+1)}")#if( $foreach.hasNext ),#{else};#end
#end

        private String value;
        ${en.key}(String value) {
            this.value = value;
        }
        public String toString() {
            return value;
        }
#else
#foreach( $v in ${en.value} )
        $v#if( $foreach.hasNext ),#end
#end
#end
    }
#end

#if( !${endpoint.producerOnly} && !${endpoint.consumerOnly} )
    /**
     * Builder for consumer endpoints for the ${endpoint.display} component.
     */
    interface ${name}EndpointConsumerBuilder extends EndpointConsumerBuilder {
        /**
         * Access to advanced options.
         */
        default Advanced${name}EndpointConsumerBuilder advanced() {
            return (Advanced${name}EndpointConsumerBuilder) this;
        }
#foreach( $prop in ${endpoint.properties} )
#if( !$prop.label.contains("advanced") && ($prop.label.contains("consumer") || !$prop.label.contains("producer")) )
#property( $prop "${name}EndpointConsumerBuilder" )
#end
#end
    }

    /**
     * Advanced builder for consumer endpoints for the ${endpoint.display} component.
     */
    interface Advanced${name}EndpointConsumerBuilder extends EndpointConsumerBuilder {
        /**
         * Access to basic options.
         */
        default ${name}EndpointConsumerBuilder basic() {
            return (${name}EndpointConsumerBuilder) this;
        }
#foreach( $prop in ${endpoint.properties} )
#if( $prop.label.contains("advanced") && ($prop.label.contains("consumer") || !$prop.label.contains("producer")) )
#property( $prop "Advanced${name}EndpointConsumerBuilder" )
#end
#end
    }

    /**
     * Builder for producer endpoints for the ${endpoint.display} component.
     */
    interface ${name}EndpointProducerBuilder extends EndpointProducerBuilder {
        /**
         * Access to advanced options.
         */
        default Advanced${name}EndpointProducerBuilder advanced() {
            return (Advanced${name}EndpointProducerBuilder) this;
        }
#foreach( $prop in ${endpoint.properties} )
#if( !$prop.label.contains("advanced") && (!$prop.label.contains("consumer") || $prop.label.contains("producer")) )
#property( $prop "${name}EndpointProducerBuilder" )
#end
#end
    }

    /**
     * Advanced builder for producer endpoints for the ${endpoint.display} component.
     */
    interface Advanced${name}EndpointProducerBuilder extends EndpointProducerBuilder {
        /**
         * Access to basic options.
         */
        default ${name}EndpointProducerBuilder basic() {
            return (${name}EndpointProducerBuilder) this;
        }
#foreach( $prop in ${endpoint.properties} )
#if( $prop.label.contains("advanced") && (!$prop.label.contains("consumer") || $prop.label.contains("producer")) )
#property( $prop "Advanced${name}EndpointProducerBuilder" )
#end
#end
    }

    /**
     * Builder for endpoints for the ${endpoint.display} component.
     */
    interface ${name}EndpointBuilder
            extends ${name}EndpointConsumerBuilder, ${name}EndpointProducerBuilder {
        /**
         * Access to advanced options.
         */
        default Advanced${name}EndpointBuilder advanced() {
            return (Advanced${name}EndpointBuilder) this;
        }
#foreach( $prop in ${endpoint.properties} )
#if( !$prop.label.contains("advanced") && (!$prop.label.contains("consumer") && !$prop.label.contains("producer") || ($prop.label.contains("consumer") && $prop.label.contains("producer"))) )
#property( $prop "${name}EndpointBuilder" )
#end
#end
    }

    /**
     * Advanced builder for endpoints for the ${endpoint.display} component.
     */
    interface Advanced${name}EndpointBuilder
            extends Advanced${name}EndpointConsumerBuilder, Advanced${name}EndpointProducerBuilder {
        /**
         * Access to basic options.
         */
        default ${name}EndpointBuilder basic() {
            return (${name}EndpointBuilder) this;
        }
#foreach( $prop in ${endpoint.properties} )
#if( $prop.label.contains("advanced") && !$prop.label.contains("consumer") && !$prop.label.contains("producer") )
#property( $prop "Advanced${name}EndpointBuilder" )
#end
#end
    }
#elseif( ${endpoint.consumerOnly} )
    /**
     * Builder for endpoints for the ${endpoint.display} component.
     */
    interface ${name}EndpointBuilder extends EndpointConsumerBuilder {
        default Advanced${name}EndpointBuilder advanced() {
            return (Advanced${name}EndpointBuilder) this;
        }
#foreach( $prop in ${endpoint.properties} )
#if( !$prop.label.contains("advanced") && !$prop.label.contains("producer") )
#property( $prop "${name}EndpointBuilder" )
#end
#end
    }

    /**
     * Advanced builder for endpoints for the ${endpoint.display} component.
     */
    interface Advanced${name}EndpointBuilder extends EndpointConsumerBuilder {
        /**
         * Access to basic options.
         */
        default ${name}EndpointBuilder basic() {
            return (${name}EndpointBuilder) this;
        }
#foreach( $prop in ${endpoint.properties} )
#if( $prop.label.contains("advanced") && !$prop.label.contains("producer") )
#property( $prop "Advanced${name}EndpointBuilder" )
#end
#end
    }

#elseif( ${endpoint.producerOnly} )
    /**
     * Builder for endpoints for the ${endpoint.display} component.
     */
    interface ${name}EndpointBuilder extends EndpointProducerBuilder {
        /**
         * Access to advanced options.
         */
        default Advanced${name}EndpointBuilder advanced() {
            return (Advanced${name}EndpointBuilder) this;
        }
#foreach( $prop in ${endpoint.properties} )
#if( !$prop.label.contains("advanced") && !$prop.label.contains("consumer") )
#property( $prop "${name}EndpointBuilder" )
#end
#end
    }

    /**
     * Advanced builder for endpoints for the ${endpoint.display} component.
     */
    interface Advanced${name}EndpointBuilder extends EndpointProducerBuilder {
        /**
         * Access to basic options.
         */
        default ${name}EndpointBuilder basic() {
            return (${name}EndpointBuilder) this;
        }
#foreach( $prop in ${endpoint.properties} )
#if( $prop.label.contains("advanced") && !$prop.label.contains("consumer") )
    #property( $prop "Advanced${name}EndpointBuilder" )
#end
#end
    }
#end

#if( $schemes.size() > 1 )
#foreach( $scheme in $schemes )
    /**
     * ${endpoint.description}
     */
    default ${name}EndpointBuilder ${main.camelCaseLower($scheme)}(String path) {
        return ${main.camelCaseLower($name)}("${scheme}", path);
    }
#end
    /**
     * ${endpoint.description}
     */
    default ${name}EndpointBuilder ${main.camelCaseLower($name)}(String scheme, String path) {
        class ${name}EndpointBuilderImpl extends AbstractEndpointBuilder
                implements ${name}EndpointBuilder, Advanced${name}EndpointBuilder {
            private ${name}EndpointBuilderImpl(String scheme, String path) {
                super(scheme, path);
            }
        }
        return new ${name}EndpointBuilderImpl(scheme, path);
    }
#else
#foreach( $scheme in $schemes )
    /**
     * ${endpoint.description}
     */
    default ${name}EndpointBuilder ${main.camelCaseLower($scheme)}(String path) {
        class ${name}EndpointBuilderImpl extends AbstractEndpointBuilder
                implements ${name}EndpointBuilder, Advanced${name}EndpointBuilder {
            private ${name}EndpointBuilderImpl(String scheme, String path) {
                super(scheme, path);
            }
        }
        return new ${name}EndpointBuilderImpl("${scheme}", path);
    }
#end
#end
}