#set( $newline="
")
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.camel.model.dataformats;

#foreach( $imp in ${main.getImports(${dataFormat})} )
import ${imp};
#end

/**
 * ${dataFormat.description}
 *
 * Generated by camel meta-model tooling
 */
public class ${name}DataFormat extends DataFormatDefinition {

#foreach( $en in ${main.getEnums($dataFormat).entrySet()} )
    enum ${en.key} {
#set( $cplx = false )
#foreach( $v in ${en.value} )
#if( ${v.contains(":")} )
#set( $cplx = true )
#end
#end
#if( $cplx )
#foreach( $v in ${en.value} )
        ${v.substring(0, ${v.indexOf(":")})}("${v.substring(${v.indexOf(":")}+1)}")#if( $foreach.hasNext ),#{else};#end
#end

        private String value;
        ${en.key}(String value) {
            this.value = value;
        }
        public String toString() {
            return value;
        }
#else
#foreach( $v in ${en.value} )
        $v#if( $foreach.hasNext ),#end
#end
#end
    }
#end

    public ${name}DataFormat() {
        super("${dataFormat.name}");
    }

#foreach( $prop in ${dataFormat.properties} )
#set( $propname = ${prop.name.substring(0,1).toUpperCase()} + ${prop.name.substring(1)} )
    ${main.javadoc(${prop.description} + ${newline} + "This property is of type <code>" + ${prop.type} + "</code>.", "    ")}
    public ${name}DataFormat ${prop.name}(${main.getType($prop.type)} ${prop.name}) {
        set${propname}(${prop.name});
        return this;
    }

#if( ${main.getType($prop.type)} != "String" )
    ${main.javadoc(${prop.description} + ${newline} + "This property is of type <code>" + ${prop.type} + "</code>.", "    ")}
    public ${name}DataFormat ${prop.name}(String ${prop.name}) {
        setProperty("${prop.name}", ${prop.name});
        return this;
    }

#end
    ${main.javadoc(${prop.description} + ${newline} + "This property is of type <code>" + ${prop.type} + "</code>.", "    ")}
    public void set${propname}(${main.getType($prop.type)} ${prop.name}) {
        setProperty("${prop.name}", ${prop.name});
    }

    ${main.javadoc(${prop.description} + ${newline} + "This property is of type <code>" + ${prop.type} + "</code>.", "    ")}
    public Object get${propname}() {
        return getProperty("${prop.name}");
    }

#end

}