#set( $newline="
")
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ${packageName};

#foreach( $imp in ${main.getImports(${data}, ${packageName})} )
import ${imp};
#end

/**
 * ${data.description}
 *
 * Generated by camel meta-model tooling
 */
@javax.annotation.Generated("org.apache.camel.metamodel")
#if( ${data.extends} )
#set( $extends = ${main.getType($data.extends)} )
#else
#set( $extends = "BaseDefinition" )
#end
#if( ${data.abstract} )
#set( $abstract = "abstract " )
#else
#set( $abstract = "" )
#end
public ${abstract}class ${name} extends ${extends} {

#foreach( $en in ${main.getEnums($data).entrySet()} )
    enum ${en.key} {
#set( $cplx = false )
#foreach( $v in ${en.value} )
#if( ${v.contains(":")} )
#set( $cplx = true )
#end
#end
#if( $cplx )
#foreach( $v in ${en.value} )
        ${v.substring(0, ${v.indexOf(":")})}("${v.substring(${v.indexOf(":")}+1)}")#if( $foreach.hasNext ),#{else};#end
#end

        private String value;
        ${en.key}(String value) {
            this.value = value;
        }
        public String toString() {
            return value;
        }
#else
#foreach( $v in ${en.value} )
        $v#if( $foreach.hasNext ),#end
#end
#end
    }
#end

    public ${name}() {
    }

    public String getShortName() {
        return "${data.name}";
    }

#foreach( $parent in ${main.getHierarchy($data)} )
#foreach( $prop in ${parent.properties} )
#set( $propnamelow = ${main.camelCaseLower(${prop.name})} )
    ${main.javadoc(${prop.description} + ${newline} + "This property is of type <code>" + ${prop.type} + "</code>.", "    ")}
    public ${name} ${propnamelow}(${main.getType($prop.type)} ${propnamelow}) {
        doSetProperty("${propnamelow}", ${propnamelow});
        return this;
    }

#end
#end
#foreach( $prop in ${data.properties} )
#set( $propname = ${main.camelCaseUpper(${prop.name})} )
#set( $propnamelow = ${main.camelCaseLower(${prop.name})} )
#set( $nbprops = 0 )
#foreach( $p in ${data.properties} )
#if( ${p.name} == ${prop.name} )
#set( $last = $p )
#set( $nbprops = $nbprops + 1 )
#end
#end
    ${main.javadoc(${prop.description} + ${newline} + "This property is of type <code>" + ${prop.type} + "</code>.", "    ")}
    public ${name} ${propnamelow}(${main.getType($prop.type)} ${propnamelow}) {
        set${propname}(${propnamelow});
        return this;
    }

#if( $last == $prop && ${main.getType($prop.type)} != "String" && !${prop.type.startsWith('list(model:')})
    ${main.javadoc(${prop.description} + ${newline} + "This property is of type <code>" + ${prop.type} + "</code>.", "    ")}
    public ${name} ${propnamelow}(String ${propnamelow}) {
        doSetProperty("${propnamelow}", ${propnamelow});
        return this;
    }

#end
    ${main.javadoc(${prop.description} + ${newline} + "This property is of type <code>" + ${prop.type} + "</code>.", "    ")}
    public void set${propname}(${main.getType($prop.type)} ${propnamelow}) {
        doSetProperty("${propnamelow}", ${propnamelow});
    }

#if( $last == $prop )
    ${main.javadoc(${prop.description} + ${newline} + "This property is of type <code>" + ${prop.type} + "</code>.", "    ")}
#if( ${prop.type.startsWith('list(model:')} )
    public ${main.getType($prop.type)} get${propname}() {
        return (${main.getType($prop.type)}) doGetProperty("${propnamelow}");
    }
#elseif( ${main.getType($prop.type)} == "String" )
    public String get${propname}() {
        return (String) doGetProperty("${propnamelow}");
    }
#else
    public Object get${propname}() {
        return doGetProperty("${propnamelow}");
    }
#end
#end

#end

}