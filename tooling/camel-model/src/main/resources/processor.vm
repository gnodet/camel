#set( $newline="
")
/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ${packageName};

#foreach( $imp in ${main.getImports(${data}, ${packageName})} )
import ${imp};
#end

/**
 * ${data.description}
 *
 * Generated by camel meta-model tooling
 */
@SuppressWarnings({"unused", "WeakerAccess"})
@javax.annotation.Generated("org.apache.camel.metamodel")
#set( $hasOutput = false )
#set( $hasExpression = false )
#foreach( $prop in ${data.properties} )
#if( ${prop.name} == "outputs" )
#set( $hasOutput = true )
#elseif( ${prop.name} == "expression" )
#set( $hasExpression = true )
#end
#end
#if( $hasOutput && $hasExpression )
#set( $parent = "OutputExpressionNode" )
#elseif( $hasOutput )
#set( $parent = "OutputDefinition" )
#elseif( $hasExpression )
#set( $parent = "ExpressionNode" )
#else
#set( $parent = "NoOutputDefinition" )
#end
#set( $param = "" )
#set( $paramst = "" )
#if( ${data.param} )
#set( $param = "${data.param}, " )
#set( $paramst = ${main.substringBefore(${data.param}," ")} + ", " )
#end
public class ${name}<${param}Type extends ProcessorDefinition<Type>> extends ${parent}<${name}<${paramst}Type>> {

#foreach( $en in ${main.getEnums(${data}).entrySet()} )
    enum ${en.key} {
#set( $cplx = false )
#foreach( $v in ${en.value} )
#if( ${v.contains(":")} )
#set( $cplx = true )
#end
#end
#if( $cplx )
#foreach( $v in ${en.value} )
        ${v.substring(0, ${v.indexOf(":")})}("${v.substring(${v.indexOf(":")}+1)}")#if( $foreach.hasNext ),#{else};#end
#end

        private String value;
        ${en.key}(String value) {
            this.value = value;
        }
        public String toString() {
            return value;
        }
#else
#foreach( $v in ${en.value} )
        $v#if( $foreach.hasNext ),#end
#end
#end
    }
#end

    public ${name}() {
    }

    @Override
    public String getShortName() {
        return "${data.name}";
    }

#foreach( $prop in ${data.properties} )
#if ( ${prop.name} != "outputs" && ${prop.name} != "expression" )
#set( $propname = ${main.camelCaseUpper(${prop.name})} )
#set( $propnamelow = ${main.camelCaseLower(${prop.name})} )
#set( $last = $prop )
#set( $nbprops = 0 )
#foreach( $p in ${data.properties} )
#if( ${p.name} == ${prop.name} )
#set( $last = $p )
#set( $nbprops = $nbprops + 1 )
#end
#end
    ${main.javadoc(${prop.description} + ${newline} + "This property is of type <code>" + ${prop.type} + "</code>.", "    ")}
    public ${name}<${paramst}Type> ${propnamelow}(${main.getType($prop.type)} ${propnamelow}) {
        set${propname}(${prop.name});
        return this;
    }

#if( ${prop.type} == 'model:expression' )
    ${main.javadoc(${prop.description} + ${newline} + "This property is of type <code>" + ${prop.type} + "</code>.", "    ")}
    public ${name}<${paramst}Type> ${propnamelow}(Expression ${propnamelow}) {
        doSetProperty("${prop.name}", ${prop.name});
        return this;
    }

#end
#if( ${main.getType($prop.type)} != "String" && ($last == $prop) && (${prop.type.equals('model:endpoint')} || !${prop.type.startsWith('list(model:')})  )
    ${main.javadoc(${prop.description} + ${newline} + "This property is of type <code>" + ${prop.type} + "</code>.", "    ")}
    public ${name}<${paramst}Type> ${prop.name}(String ${prop.name}) {
        doSetProperty("${prop.name}", ${prop.name});
        return this;
    }

#end
    ${main.javadoc(${prop.description} + ${newline} + "This property is of type <code>" + ${prop.type} + "</code>.", "    ")}
    public void set${propname}(${main.getType($prop.type)} ${prop.name}) {
        doSetProperty("${prop.name}", ${prop.name});
    }

#if( $last == $prop )
#if( ${nbProps} > 1 || (!${prop.type.startsWith('model:')} && !${prop.type.startsWith('list(model:')}) )
    ${main.javadoc(${prop.description} + ${newline} + "This property is of type <code>" + ${prop.type} + "</code>.", "    ")}
    public Object get${propname}() {
        return doGetProperty("${prop.name}");
    }
#else
    ${main.javadoc(${prop.description} + ${newline} + "This property is of type <code>" + ${prop.type} + "</code>.", "    ")}
#if( ${main.getType($prop.type).contains('<')} )
    @SuppressWarnings("unchecked")
#end
    public ${main.getType($prop.type)} get${propname}() {
        return (${main.getType($prop.type)}) doGetProperty("${prop.name}");
    }
#end

#end
#end
#end

    public Type end() {
        return (Type) super.end();
    }
}