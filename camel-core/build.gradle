import java.nio.file.Paths

/*
 * This file was generated by the Gradle 'init' task.
 */

dependencies {
    compile project(':camel-parent:tooling:spi-annotations')
    compile project(':camel-parent:tooling:meta-annotations')
    compile project(':camel-parent:camel-util')
    compile project(':camel-parent:camel-api')
    compile project(':camel-parent:camel-management-api')
    compile project(':camel-parent:tooling:json-simple-ordered')
    compile 'com.github.ben-manes.caffeine:caffeine:2.6.2'
    compile 'org.slf4j:slf4j-api:1.7.25'
    testCompile 'org.codehaus.woodstox:woodstox-core-asl:4.4.1'
    testCompile 'junit:junit:4.12'
    testCompile 'org.openjdk.jmh:jmh-core:1.21'
    testCompile 'org.openjdk.jmh:jmh-generator-annprocess:1.21'
    testCompile 'org.hamcrest:java-hamcrest:2.0.0.0'
    testCompile 'org.awaitility:awaitility:3.1.3'
    testCompile 'org.assertj:assertj-core:3.11.1'
    testCompile 'org.apache.logging.log4j:log4j-api:2.11.1'
    testCompile 'org.apache.logging.log4j:log4j-core:2.11.1'
    testCompile 'org.apache.logging.log4j:log4j-slf4j-impl:2.11.1'
    testCompile 'org.mockito:mockito-core:2.23.0'
    testCompile 'com.fasterxml.jackson.core:jackson-databind:2.9.7'
    testCompile 'com.fasterxml.jackson.core:jackson-core:2.9.7'
    testCompile 'xml-resolver:xml-resolver:1.2'
    compileOnly 'org.osgi:org.osgi.core:4.3.1'
    compileOnly project(':camel-parent:tooling:maven-plugins:camel-package-maven-plugin')
}

configurations {
    testArtifacts
}

test {
    environment "FOO_SERVICE_HOST", "myserver"
    environment "FOO_SERVICE_PORT", "8081"
    systemProperty "baseDirectory", file(".")
    systemProperty "buildDirectory", file("build")
    systemProperty "javax.xml.accessExternalSchema", "file,http"
    systemProperty "javax.xml.accessExternalDTD", "file,http"
    maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

task testJar(type: Jar) {
    classifier = 'tests'
    from(sourceSets.test.output)
}

artifacts {
    testArtifacts testJar
}

task generate {
    dependsOn 'compileJava'
    inputs.files(fileTree('src/main/java'))
    outputs.dir("$buildDir/generated/main/java")
    outputs.dir("$buildDir/generated/main/resources")
    doLast {
        def files = project.configurations.compileClasspath.collect { it.toURI().toURL() }
        def cl = new URLClassLoader(files.toArray(new URL[0]))
        def generator = cl.loadClass('org.apache.camel.tooling.packaging.gradle.GradleGenerator').newInstance()
        generator.groupId = project.group
        generator.artifactId = project.name
        generator.version = project.version
        generator.classpath = project.configurations.runtimeClasspath.collect { it.toString() } \
                + file("$buildDir/classes/java/main").toString()
        generator.sources = [ file('src/main/java').toString(), file("$buildDir/generated/main/java").toString() ]
        generator.resources = [ file('src/main/resources').toString(), file("$buildDir/generated/main/resources").toString() ]
        generator.outputDirectory = "$buildDir/classes/java/main"
        generator.rootDir = file("${project.rootDir}").toPath()
        generator.processCamelCore file("$buildDir/generated/main/java"), file("$buildDir/generated/main/resources")
    }
}

task compileGeneratedSources(type: JavaCompile) {
    dependsOn 'generate'
    inputs.files(fileTree("$buildDir/generated/java"))
    outputs.dir("$buildDir/classes/java/main")
    source = fileTree(dir: "$buildDir/generated/main/java", include: '**/*.java')
    destinationDir = file("$buildDir/classes/java/main")
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    classpath = files(project.configurations.compileClasspath) + files("$buildDir/classes/java/main")
}

task copyGeneratedResources(type: Copy) {
    dependsOn 'generate'
    inputs.files(fileTree("$buildDir/generated/main/resources"))
    outputs.dir("$buildDir/classes/java/main")
    from file("$buildDir/generated/main/resources")
    into file("$buildDir/classes/java/main")
}

jar.dependsOn 'compileGeneratedSources', 'copyGeneratedResources'

description = 'Camel :: Core'
artifacts.archives(tasks.testJar)
