{
 "component": {
    "kind": "component",
    "scheme": "mqtt",
    "syntax": "mqtt:name",
    "title": "MQTT",
    "description": "Component for communicating with MQTT M2M message brokers using FuseSource MQTT Client.",
    "label": "messaging,iot",
    "deprecated": false,
    "deprecationNote": "",
    "async": true,
    "consumerOnly": false,
    "producerOnly": false,
    "lenientProperties": false,
    "javaType": "org.apache.camel.component.mqtt.MQTTComponent",
    "firstVersion": "2.10.0",
    "groupId": "org.apache.camel",
    "artifactId": "camel-mqtt",
    "version": "3.0.0-SNAPSHOT"
  },
  "componentProperties": {
    "host": { "kind": "property", "displayName": "Host", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "The URI of the MQTT broker to connect too - this component also supports SSL - e.g. ssl://127.0.0.1:8883" },
    "userName": { "kind": "property", "displayName": "User Name", "group": "security", "label": "security", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": true, "description": "Username to be used for authentication against the MQTT broker" },
    "password": { "kind": "property", "displayName": "Password", "group": "security", "label": "security", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": true, "description": "Password to be used for authentication against the MQTT broker" },
    "resolvePropertyPlaceholders": { "kind": "property", "displayName": "Resolve Property Placeholders", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": true, "description": "Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders." },
    "basicPropertyBinding": { "kind": "property", "displayName": "Basic Property Binding", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities" }
  },
  "properties": {
    "name": { "kind": "path", "displayName": "Name", "group": "common", "required": true, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "A logical name to use which is not the topic name." },
    "blockingExecutor": { "kind": "parameter", "displayName": "Blocking Executor", "group": "common", "required": false, "type": "object", "javaType": "java.util.concurrent.Executor", "deprecated": false, "secret": false, "description": "SSL connections perform blocking operations against internal thread pool unless you call the setBlockingExecutor method to configure that executor they will use instead." },
    "byDefaultRetain": { "kind": "parameter", "displayName": "By Default Retain", "group": "common", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "The default retain policy to be used on messages sent to the MQTT broker" },
    "cleanSession": { "kind": "parameter", "displayName": "Clean Session", "group": "common", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Set to false if you want the MQTT server to persist topic subscriptions and ack positions across client sessions. Defaults to true." },
    "clientId": { "kind": "parameter", "displayName": "Client Id", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "Use to set the client Id of the session. This is what an MQTT server uses to identify a session where setCleanSession(false); is being used. The id must be 23 characters or less. Defaults to auto generated id (based on your socket address, port and timestamp)." },
    "connectAttemptsMax": { "kind": "parameter", "displayName": "Connect Attempts Max", "group": "common", "required": false, "type": "integer", "javaType": "long", "deprecated": false, "secret": false, "defaultValue": -1, "description": "The maximum number of reconnect attempts before an error is reported back to the client on the first attempt by the client to connect to a server. Set to -1 to use unlimited attempts. Defaults to -1." },
    "connectWaitInSeconds": { "kind": "parameter", "displayName": "Connect Wait In Seconds", "group": "common", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "defaultValue": 10, "description": "Delay in seconds the Component will wait for a connection to be established to the MQTT broker" },
    "disconnectWaitInSeconds": { "kind": "parameter", "displayName": "Disconnect Wait In Seconds", "group": "common", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "defaultValue": 5, "description": "The number of seconds the Component will wait for a valid disconnect on stop() from the MQTT broker" },
    "dispatchQueue": { "kind": "parameter", "displayName": "Dispatch Queue", "group": "common", "required": false, "type": "object", "javaType": "org.fusesource.hawtdispatch.DispatchQueue", "deprecated": false, "secret": false, "description": "A HawtDispatch dispatch queue is used to synchronize access to the connection. If an explicit queue is not configured via the setDispatchQueue method, then a new queue will be created for the connection. Setting an explicit queue might be handy if you want multiple connection to share the same queue for synchronization." },
    "host": { "kind": "parameter", "displayName": "Host", "group": "common", "required": false, "type": "string", "javaType": "java.net.URI", "deprecated": false, "secret": false, "defaultValue": "tcp://127.0.0.1:1883", "description": "The URI of the MQTT broker to connect too - this component also supports SSL - e.g. ssl://127.0.0.1:8883" },
    "keepAlive": { "kind": "parameter", "displayName": "Keep Alive", "group": "common", "required": false, "type": "integer", "javaType": "short", "deprecated": false, "secret": false, "description": "Configures the Keep Alive timer in seconds. Defines the maximum time interval between messages received from a client. It enables the server to detect that the network connection to a client has dropped, without having to wait for the long TCP/IP timeout." },
    "localAddress": { "kind": "parameter", "displayName": "Local Address", "group": "common", "required": false, "type": "string", "javaType": "java.net.URI", "deprecated": false, "secret": false, "description": "The local InetAddress and port to use" },
    "maxReadRate": { "kind": "parameter", "displayName": "Max Read Rate", "group": "common", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "description": "Sets the maximum bytes per second that this transport will receive data at. This setting throttles reads so that the rate is not exceeded. Defaults to 0 which disables throttling." },
    "maxWriteRate": { "kind": "parameter", "displayName": "Max Write Rate", "group": "common", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "description": "Sets the maximum bytes per second that this transport will send data at. This setting throttles writes so that the rate is not exceeded. Defaults to 0 which disables throttling." },
    "mqttQosPropertyName": { "kind": "parameter", "displayName": "Mqtt Qos Property Name", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "defaultValue": "MQTTQos", "description": "The property name to look for on an Exchange for an individual published message. If this is set (one of AtMostOnce, AtLeastOnce or ExactlyOnce ) - then that QoS will be set on the message sent to the MQTT message broker." },
    "mqttRetainPropertyName": { "kind": "parameter", "displayName": "Mqtt Retain Property Name", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "defaultValue": "MQTTRetain", "description": "The property name to look for on an Exchange for an individual published message. If this is set (expects a Boolean value) - then the retain property will be set on the message sent to the MQTT message broker." },
    "mqttTopicPropertyName": { "kind": "parameter", "displayName": "Mqtt Topic Property Name", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "defaultValue": "MQTTTopicPropertyName", "description": "These a properties that are looked for in an Exchange - to publish to" },
    "publishTopicName": { "kind": "parameter", "displayName": "Publish Topic Name", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "defaultValue": "camel/mqtt/test", "description": "The default Topic to publish messages on" },
    "qualityOfService": { "kind": "parameter", "displayName": "Quality Of Service", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "enum": [ "AtMostOnce", "AtLeastOnce", "ExactlyOnce" ], "deprecated": false, "secret": false, "defaultValue": "AtLeastOnce", "description": "Quality of service level to use for topics." },
    "receiveBufferSize": { "kind": "parameter", "displayName": "Receive Buffer Size", "group": "common", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "defaultValue": 65536, "description": "Sets the size of the internal socket receive buffer. Defaults to 65536 (64k)" },
    "reconnectAttemptsMax": { "kind": "parameter", "displayName": "Reconnect Attempts Max", "group": "common", "required": false, "type": "integer", "javaType": "long", "deprecated": false, "secret": false, "defaultValue": -1, "description": "The maximum number of reconnect attempts before an error is reported back to the client after a server connection had previously been established. Set to -1 to use unlimited attempts. Defaults to -1." },
    "reconnectBackOffMultiplier": { "kind": "parameter", "displayName": "Reconnect Back Off Multiplier", "group": "common", "required": false, "type": "number", "javaType": "double", "deprecated": false, "secret": false, "defaultValue": 2.0, "description": "The Exponential backoff be used between reconnect attempts. Set to 1 to disable exponential backoff. Defaults to 2." },
    "reconnectDelay": { "kind": "parameter", "displayName": "Reconnect Delay", "group": "common", "required": false, "type": "integer", "javaType": "long", "deprecated": false, "secret": false, "defaultValue": 10, "description": "How long to wait in ms before the first reconnect attempt. Defaults to 10." },
    "reconnectDelayMax": { "kind": "parameter", "displayName": "Reconnect Delay Max", "group": "common", "required": false, "type": "integer", "javaType": "long", "deprecated": false, "secret": false, "defaultValue": 30000, "description": "The maximum amount of time in ms to wait between reconnect attempts. Defaults to 30,000." },
    "sendBufferSize": { "kind": "parameter", "displayName": "Send Buffer Size", "group": "common", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "defaultValue": 65536, "description": "Sets the size of the internal socket send buffer. Defaults to 65536 (64k)" },
    "sendWaitInSeconds": { "kind": "parameter", "displayName": "Send Wait In Seconds", "group": "common", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "defaultValue": 5, "description": "The maximum time the Component will wait for a receipt from the MQTT broker to acknowledge a published message before throwing an exception" },
    "sslContext": { "kind": "parameter", "displayName": "Ssl Context", "group": "common", "required": false, "type": "object", "javaType": "javax.net.ssl.SSLContext", "deprecated": false, "secret": false, "description": "To configure security using SSLContext configuration" },
    "subscribeTopicName": { "kind": "parameter", "displayName": "Subscribe Topic Name", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": true, "secret": false, "description": "These are set on the Endpoint - together with properties inherited from MQTT" },
    "subscribeTopicNames": { "kind": "parameter", "displayName": "Subscribe Topic Names", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "A comma-delimited list of Topics to subscribe to for messages. Note that each item of this list can contain MQTT wildcards ( and/or #), in order to subscribe to topics matching a certain pattern within a hierarchy. For example, is a wildcard for all topics at a level within the hierarchy, so if a broker has topics topics/one and topics/two, then topics/ can be used to subscribe to both. A caveat to consider here is that if the broker adds topics/three, the route would also begin to receive messages from that topic." },
    "trafficClass": { "kind": "parameter", "displayName": "Traffic Class", "group": "common", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "defaultValue": 8, "description": "Sets traffic class or type-of-service octet in the IP header for packets sent from the transport. Defaults to 8 which means the traffic should be optimized for throughput." },
    "version": { "kind": "parameter", "displayName": "Version", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "defaultValue": "3.1", "description": "Set to 3.1.1 to use MQTT version 3.1.1. Otherwise defaults to the 3.1 protocol version." },
    "willMessage": { "kind": "parameter", "displayName": "Will Message", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "The Will message to send. Defaults to a zero length message." },
    "willQos": { "kind": "parameter", "displayName": "Will Qos", "group": "common", "required": false, "type": "object", "javaType": "org.fusesource.mqtt.client.QoS", "enum": [ "AtMostOnce", "AtLeastOnce", "ExactlyOnce" ], "deprecated": false, "secret": false, "defaultValue": "AtMostOnce", "description": "Sets the quality of service to use for the Will message. Defaults to AT_MOST_ONCE." },
    "willRetain": { "kind": "parameter", "displayName": "Will Retain", "group": "common", "required": false, "type": "object", "javaType": "org.fusesource.mqtt.client.QoS", "enum": [ "AT_MOST_ONCE", "AT_LEAST_ONCE", "EXACTLY_ONCE" ], "deprecated": false, "secret": false, "description": "Set to true if you want the Will to be published with the retain option." },
    "willTopic": { "kind": "parameter", "displayName": "Will Topic", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "If set the server will publish the client's Will message to the specified topics if the client has an unexpected disconnection." },
    "bridgeErrorHandler": { "kind": "parameter", "displayName": "Bridge Error Handler", "group": "consumer", "label": "consumer", "required": false, "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": false, "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "exceptionHandler": { "kind": "parameter", "displayName": "Exception Handler", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "displayName": "Exchange Pattern", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "InOut", "InOptionalOut" ], "deprecated": false, "secret": false, "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "lazyStartProducer": { "kind": "parameter", "displayName": "Lazy Start Producer", "group": "producer", "label": "producer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing." },
    "lazySessionCreation": { "kind": "parameter", "displayName": "Lazy Session Creation", "group": "producer (advanced)", "label": "producer,advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": true, "description": "Sessions can be lazily created to avoid exceptions, if the remote server is not up and running when the Camel producer is started." },
    "basicPropertyBinding": { "kind": "parameter", "displayName": "Basic Property Binding", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities" },
    "synchronous": { "kind": "parameter", "displayName": "Synchronous", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported)." }
  }
}

