{
 "component": {
    "kind": "component",
    "scheme": "hdfs",
    "alternativeSchemes": "hdfs2,hdfs",
    "syntax": "hdfs:hostName:port/path",
    "title": "HDFS2",
    "description": "For reading/writing from/to an HDFS filesystem using Hadoop 2.x.",
    "label": "hadoop,file",
    "deprecated": false,
    "deprecationNote": "",
    "async": false,
    "consumerOnly": false,
    "producerOnly": false,
    "lenientProperties": false,
    "javaType": "org.apache.camel.component.hdfs2.HdfsComponent",
    "firstVersion": "2.14.0",
    "groupId": "org.apache.camel",
    "artifactId": "camel-hdfs2",
    "version": "3.0.0-SNAPSHOT"
  },
  "componentProperties": {
    "jAASConfiguration": { "kind": "property", "displayName": "JAASConfiguration", "group": "common", "required": false, "type": "object", "javaType": "javax.security.auth.login.Configuration", "deprecated": false, "secret": false, "description": "To use the given configuration for security with JAAS." },
    "resolvePropertyPlaceholders": { "kind": "property", "displayName": "Resolve Property Placeholders", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": true, "description": "Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders." },
    "basicPropertyBinding": { "kind": "property", "displayName": "Basic Property Binding", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities" }
  },
  "properties": {
    "hostName": { "kind": "path", "displayName": "Host Name", "group": "common", "required": true, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "HDFS host to use" },
    "port": { "kind": "path", "displayName": "Port", "group": "common", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "defaultValue": 8020, "description": "HDFS port to use" },
    "path": { "kind": "path", "displayName": "Path", "group": "common", "required": true, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "The directory path to use" },
    "connectOnStartup": { "kind": "parameter", "displayName": "Connect On Startup", "group": "common", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": true, "description": "Whether to connect to the HDFS file system on starting the producer/consumer. If false then the connection is created on-demand. Notice that HDFS may take up till 15 minutes to establish a connection, as it has hardcoded 45 x 20 sec redelivery. By setting this option to false allows your application to startup, and not block for up till 15 minutes." },
    "fileSystemType": { "kind": "parameter", "displayName": "File System Type", "group": "common", "required": false, "type": "object", "javaType": "org.apache.camel.component.hdfs2.HdfsFileSystemType", "enum": [ "LOCAL", "HDFS" ], "deprecated": false, "secret": false, "defaultValue": "HDFS", "description": "Set to LOCAL to not use HDFS but local java.io.File instead." },
    "fileType": { "kind": "parameter", "displayName": "File Type", "group": "common", "required": false, "type": "object", "javaType": "org.apache.camel.component.hdfs2.HdfsFileType", "enum": [ "NORMAL_FILE", "SEQUENCE_FILE", "MAP_FILE", "BLOOMMAP_FILE", "ARRAY_FILE" ], "deprecated": false, "secret": false, "defaultValue": "NORMAL_FILE", "description": "The file type to use. For more details see Hadoop HDFS documentation about the various files types." },
    "keyType": { "kind": "parameter", "displayName": "Key Type", "group": "common", "required": false, "type": "object", "javaType": "org.apache.camel.component.hdfs2.WritableType", "enum": [ "NULL", "BOOLEAN", "BYTE", "INT", "FLOAT", "LONG", "DOUBLE", "TEXT", "BYTES" ], "deprecated": false, "secret": false, "defaultValue": "NULL", "description": "The type for the key in case of sequence or map files." },
    "owner": { "kind": "parameter", "displayName": "Owner", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "The file owner must match this owner for the consumer to pickup the file. Otherwise the file is skipped." },
    "valueType": { "kind": "parameter", "displayName": "Value Type", "group": "common", "required": false, "type": "object", "javaType": "org.apache.camel.component.hdfs2.WritableType", "enum": [ "NULL", "BOOLEAN", "BYTE", "INT", "FLOAT", "LONG", "DOUBLE", "TEXT", "BYTES" ], "deprecated": false, "secret": false, "defaultValue": "BYTES", "description": "The type for the key in case of sequence or map files" },
    "bridgeErrorHandler": { "kind": "parameter", "displayName": "Bridge Error Handler", "group": "consumer", "label": "consumer", "required": false, "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": false, "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "pattern": { "kind": "parameter", "displayName": "Pattern", "group": "consumer", "label": "consumer", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "defaultValue": "*", "description": "The pattern used for scanning the directory" },
    "sendEmptyMessageWhenIdle": { "kind": "parameter", "displayName": "Send Empty Message When Idle", "group": "consumer", "label": "consumer", "required": false, "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": false, "description": "If the polling consumer did not poll any files, you can enable this option to send an empty message (no body) instead." },
    "exceptionHandler": { "kind": "parameter", "displayName": "Exception Handler", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "displayName": "Exchange Pattern", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "InOut", "InOptionalOut" ], "deprecated": false, "secret": false, "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "pollStrategy": { "kind": "parameter", "displayName": "Poll Strategy", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.spi.PollingConsumerPollStrategy", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "description": "A pluggable org.apache.camel.PollingConsumerPollingStrategy allowing you to provide your custom implementation to control error handling usually occurred during the poll operation before an Exchange have been created and being routed in Camel." },
    "append": { "kind": "parameter", "displayName": "Append", "group": "producer", "label": "producer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Append to existing file. Notice that not all HDFS file systems support the append option." },
    "lazyStartProducer": { "kind": "parameter", "displayName": "Lazy Start Producer", "group": "producer", "label": "producer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing." },
    "overwrite": { "kind": "parameter", "displayName": "Overwrite", "group": "producer", "label": "producer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": true, "description": "Whether to overwrite existing files with the same name" },
    "basicPropertyBinding": { "kind": "parameter", "displayName": "Basic Property Binding", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities" },
    "blockSize": { "kind": "parameter", "displayName": "Block Size", "group": "advanced", "label": "advanced", "required": false, "type": "integer", "javaType": "long", "deprecated": false, "secret": false, "defaultValue": 67108864, "description": "The size of the HDFS blocks" },
    "bufferSize": { "kind": "parameter", "displayName": "Buffer Size", "group": "advanced", "label": "advanced", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "defaultValue": 4096, "description": "The buffer size used by HDFS" },
    "checkIdleInterval": { "kind": "parameter", "displayName": "Check Idle Interval", "group": "advanced", "label": "advanced", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "defaultValue": 500, "description": "How often (time in millis) in to run the idle checker background task. This option is only in use if the splitter strategy is IDLE." },
    "chunkSize": { "kind": "parameter", "displayName": "Chunk Size", "group": "advanced", "label": "advanced", "required": false, "type": "integer", "javaType": "int", "deprecated": false, "secret": false, "defaultValue": 4096, "description": "When reading a normal file, this is split into chunks producing a message per chunk." },
    "compressionCodec": { "kind": "parameter", "displayName": "Compression Codec", "group": "advanced", "label": "advanced", "required": false, "type": "object", "javaType": "org.apache.camel.component.hdfs2.HdfsCompressionCodec", "enum": [ "DEFAULT", "GZIP", "BZIP2" ], "deprecated": false, "secret": false, "defaultValue": "DEFAULT", "description": "The compression codec to use" },
    "compressionType": { "kind": "parameter", "displayName": "Compression Type", "group": "advanced", "label": "advanced", "required": false, "type": "object", "javaType": "org.apache.hadoop.io.SequenceFile.CompressionType", "deprecated": false, "secret": false, "defaultValue": "NONE", "description": "The compression type to use (is default not in use)" },
    "openedSuffix": { "kind": "parameter", "displayName": "Opened Suffix", "group": "advanced", "label": "advanced", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "defaultValue": "opened", "description": "When a file is opened for reading/writing the file is renamed with this suffix to avoid to read it during the writing phase." },
    "readSuffix": { "kind": "parameter", "displayName": "Read Suffix", "group": "advanced", "label": "advanced", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "defaultValue": "read", "description": "Once the file has been read is renamed with this suffix to avoid to read it again." },
    "replication": { "kind": "parameter", "displayName": "Replication", "group": "advanced", "label": "advanced", "required": false, "type": "integer", "javaType": "short", "deprecated": false, "secret": false, "defaultValue": 3, "description": "The HDFS replication factor" },
    "splitStrategy": { "kind": "parameter", "displayName": "Split Strategy", "group": "advanced", "label": "advanced", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "In the current version of Hadoop opening a file in append mode is disabled since it's not very reliable. So, for the moment, it's only possible to create new files. The Camel HDFS endpoint tries to solve this problem in this way: If the split strategy option has been defined, the hdfs path will be used as a directory and files will be created using the configured UuidGenerator. Every time a splitting condition is met, a new file is created. The splitStrategy option is defined as a string with the following syntax: splitStrategy=ST:value,ST:value,... where ST can be: BYTES a new file is created, and the old is closed when the number of written bytes is more than value MESSAGES a new file is created, and the old is closed when the number of written messages is more than value IDLE a new file is created, and the old is closed when no writing happened in the last value milliseconds" },
    "synchronous": { "kind": "parameter", "displayName": "Synchronous", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported)." },
    "backoffErrorThreshold": { "kind": "parameter", "displayName": "Backoff Error Threshold", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "integer", "javaType": "int", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "description": "The number of subsequent error polls (failed due some error) that should happen before the backoffMultipler should kick-in." },
    "backoffIdleThreshold": { "kind": "parameter", "displayName": "Backoff Idle Threshold", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "integer", "javaType": "int", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "description": "The number of subsequent idle polls that should happen before the backoffMultipler should kick-in." },
    "backoffMultiplier": { "kind": "parameter", "displayName": "Backoff Multiplier", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "integer", "javaType": "int", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "description": "To let the scheduled polling consumer backoff if there has been a number of subsequent idles/errors in a row. The multiplier is then the number of polls that will be skipped before the next actual attempt is happening again. When this option is in use then backoffIdleThreshold and/or backoffErrorThreshold must also be configured." },
    "delay": { "kind": "parameter", "displayName": "Delay", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "integer", "javaType": "long", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": 500, "description": "Milliseconds before the next poll. You can also specify time values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30 seconds), and 1h (1 hour)." },
    "greedy": { "kind": "parameter", "displayName": "Greedy", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": false, "description": "If greedy is enabled, then the ScheduledPollConsumer will run immediately again, if the previous run polled 1 or more messages." },
    "initialDelay": { "kind": "parameter", "displayName": "Initial Delay", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "integer", "javaType": "long", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": 1000, "description": "Milliseconds before the first poll starts. You can also specify time values using units, such as 60s (60 seconds), 5m30s (5 minutes and 30 seconds), and 1h (1 hour)." },
    "runLoggingLevel": { "kind": "parameter", "displayName": "Run Logging Level", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "object", "javaType": "org.apache.camel.LoggingLevel", "enum": [ "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF" ], "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": "TRACE", "description": "The consumer logs a start/complete log line when it polls. This option allows you to configure the logging level for that." },
    "scheduledExecutorService": { "kind": "parameter", "displayName": "Scheduled Executor Service", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "object", "javaType": "java.util.concurrent.ScheduledExecutorService", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "description": "Allows for configuring a custom/shared thread pool to use for the consumer. By default each consumer has its own single threaded thread pool." },
    "scheduler": { "kind": "parameter", "displayName": "Scheduler", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "object", "javaType": "org.apache.camel.spi.ScheduledPollConsumerScheduler", "enum": [ "none", "spring", "quartz2" ], "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": "none", "description": "To use a cron scheduler from either camel-spring or camel-quartz2 component" },
    "schedulerProperties": { "kind": "parameter", "displayName": "Scheduler Properties", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "object", "javaType": "java.util.Map<java.lang.String,java.lang.Object>", "prefix": "scheduler.", "multiValue": true, "deprecated": false, "secret": false, "description": "To configure additional properties when using a custom scheduler or any of the Quartz2, Spring based scheduler." },
    "startScheduler": { "kind": "parameter", "displayName": "Start Scheduler", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": true, "description": "Whether the scheduler should be auto started." },
    "timeUnit": { "kind": "parameter", "displayName": "Time Unit", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "object", "javaType": "java.util.concurrent.TimeUnit", "enum": [ "NANOSECONDS", "MICROSECONDS", "MILLISECONDS", "SECONDS", "MINUTES", "HOURS", "DAYS" ], "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": "MILLISECONDS", "description": "Time unit for initialDelay and delay options." },
    "useFixedDelay": { "kind": "parameter", "displayName": "Use Fixed Delay", "group": "scheduler", "label": "consumer,scheduler", "required": false, "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": true, "description": "Controls if fixed delay or fixed rate is used. See ScheduledExecutorService in JDK for details." }
  }
}

