{
 "component": {
    "kind": "component",
    "scheme": "properties",
    "syntax": "properties:key",
    "title": "Properties",
    "description": "The properties component is used for using property placeholders in endpoint uris.",
    "label": "core,endpoint",
    "deprecated": false,
    "deprecationNote": "",
    "async": false,
    "consumerOnly": false,
    "producerOnly": false,
    "lenientProperties": false,
    "javaType": "org.apache.camel.component.properties.PropertiesComponent",
    "firstVersion": "2.3.0",
    "groupId": "org.apache.camel",
    "artifactId": "camel-properties",
    "version": "3.0.0-SNAPSHOT"
  },
  "componentProperties": {
    "locations": { "kind": "property", "displayName": "Locations", "group": "common", "required": false, "type": "array", "javaType": "java.util.List<org.apache.camel.component.properties.PropertiesLocation>", "deprecated": false, "secret": false, "description": "A list of locations to load properties. This option will override any default locations and only use the locations from this option." },
    "location": { "kind": "property", "displayName": "Location", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "A list of locations to load properties. You can use comma to separate multiple locations. This option will override any default locations and only use the locations from this option." },
    "encoding": { "kind": "property", "displayName": "Encoding", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "Encoding to use when loading properties file from the file system or classpath. If no encoding has been set, then the properties files is loaded using ISO-8859-1 encoding (latin-1) as documented by java.util.Properties#load(java.io.InputStream)" },
    "propertiesResolver": { "kind": "property", "displayName": "Properties Resolver", "group": "common", "required": false, "type": "object", "javaType": "org.apache.camel.component.properties.PropertiesResolver", "deprecated": false, "secret": false, "description": "To use a custom PropertiesResolver" },
    "propertiesParser": { "kind": "property", "displayName": "Properties Parser", "group": "common", "required": false, "type": "object", "javaType": "org.apache.camel.component.properties.PropertiesParser", "deprecated": false, "secret": false, "description": "To use a custom PropertiesParser" },
    "cache": { "kind": "property", "displayName": "Cache", "group": "common", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": true, "description": "Whether or not to cache loaded properties. The default value is true." },
    "propertyPrefix": { "kind": "property", "displayName": "Property Prefix", "group": "advanced", "label": "advanced", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "Optional prefix prepended to property names before resolution." },
    "propertySuffix": { "kind": "property", "displayName": "Property Suffix", "group": "advanced", "label": "advanced", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "Optional suffix appended to property names before resolution." },
    "fallbackToUnaugmentedProperty": { "kind": "property", "displayName": "Fallback To Unaugmented Property", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": true, "description": "If true, first attempt resolution of property name augmented with propertyPrefix and propertySuffix before falling back the plain property name specified. If false, only the augmented property name is searched." },
    "defaultFallbackEnabled": { "kind": "property", "displayName": "Default Fallback Enabled", "group": "common", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": true, "description": "If false, the component does not attempt to find a default for the key by looking after the colon separator." },
    "ignoreMissingLocation": { "kind": "property", "displayName": "Ignore Missing Location", "group": "common", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Whether to silently ignore if a location cannot be located, such as a properties file not found." },
    "prefixToken": { "kind": "property", "displayName": "Prefix Token", "group": "advanced", "label": "advanced", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "defaultValue": "{{", "description": "Sets the value of the prefix token used to identify properties to replace. Setting a value of null restores the default token (link DEFAULT_PREFIX_TOKEN)." },
    "suffixToken": { "kind": "property", "displayName": "Suffix Token", "group": "advanced", "label": "advanced", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "defaultValue": "}}", "description": "Sets the value of the suffix token used to identify properties to replace. Setting a value of null restores the default token (link DEFAULT_SUFFIX_TOKEN)." },
    "initialProperties": { "kind": "property", "displayName": "Initial Properties", "group": "advanced", "label": "advanced", "required": false, "type": "object", "javaType": "java.util.Properties", "deprecated": false, "secret": false, "description": "Sets initial properties which will be used before any locations are resolved." },
    "overrideProperties": { "kind": "property", "displayName": "Override Properties", "group": "advanced", "label": "advanced", "required": false, "type": "object", "javaType": "java.util.Properties", "deprecated": false, "secret": false, "description": "Sets a special list of override properties that take precedence and will use first, if a property exist." },
    "systemPropertiesMode": { "kind": "property", "displayName": "System Properties Mode", "group": "common", "required": false, "type": "integer", "javaType": "int", "enum": [ "0", "1", "2" ], "deprecated": false, "secret": false, "defaultValue": "2", "description": "Sets the system property mode. The default mode (override) is to use system properties if present, and override any existing properties." },
    "environmentVariableMode": { "kind": "property", "displayName": "Environment Variable Mode", "group": "common", "required": false, "type": "integer", "javaType": "int", "enum": [ "0", "1", "2" ], "deprecated": false, "secret": false, "defaultValue": "1", "description": "Sets the OS environment variables mode. The default mode (override) is to use OS environment variables if present, and override any existing properties." },
    "resolvePropertyPlaceholders": { "kind": "property", "displayName": "Resolve Property Placeholders", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": true, "description": "Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders." },
    "basicPropertyBinding": { "kind": "property", "displayName": "Basic Property Binding", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities" }
  },
  "properties": {
    "key": { "kind": "path", "displayName": "Key", "group": "common", "required": true, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "Property key to use as placeholder" },
    "ignoreMissingLocation": { "kind": "parameter", "displayName": "Ignore Missing Location", "group": "common", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Whether to silently ignore if a location cannot be located, such as a properties file not found." },
    "locations": { "kind": "parameter", "displayName": "Locations", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "A list of locations to load properties. You can use comma to separate multiple locations. This option will override any default locations and only use the locations from this option." },
    "bridgeErrorHandler": { "kind": "parameter", "displayName": "Bridge Error Handler", "group": "consumer", "label": "consumer", "required": false, "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": false, "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "exceptionHandler": { "kind": "parameter", "displayName": "Exception Handler", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "displayName": "Exchange Pattern", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "InOut", "InOptionalOut" ], "deprecated": false, "secret": false, "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "lazyStartProducer": { "kind": "parameter", "displayName": "Lazy Start Producer", "group": "producer", "label": "producer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing." },
    "basicPropertyBinding": { "kind": "parameter", "displayName": "Basic Property Binding", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities" },
    "synchronous": { "kind": "parameter", "displayName": "Synchronous", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported)." }
  }
}

