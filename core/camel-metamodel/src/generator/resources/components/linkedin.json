{
 "component": {
    "kind": "component",
    "scheme": "linkedin",
    "syntax": "linkedin:apiName/methodName",
    "title": "Linkedin",
    "description": "The linkedin component is used for retrieving LinkedIn user profiles, connections, companies, groups, posts, etc.",
    "label": "api,cloud,social",
    "deprecated": false,
    "deprecationNote": "",
    "async": false,
    "consumerOnly": false,
    "producerOnly": false,
    "lenientProperties": true,
    "javaType": "org.apache.camel.component.linkedin.LinkedInComponent",
    "firstVersion": "2.14.0",
    "groupId": "org.apache.camel",
    "artifactId": "camel-linkedin",
    "version": "3.0.0-SNAPSHOT"
  },
  "componentProperties": {
    "configuration": { "kind": "property", "displayName": "Configuration", "group": "common", "required": false, "type": "object", "javaType": "org.apache.camel.component.linkedin.LinkedInConfiguration", "deprecated": false, "secret": false, "description": "To use the shared configuration" },
    "resolvePropertyPlaceholders": { "kind": "property", "displayName": "Resolve Property Placeholders", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": true, "description": "Whether the component should resolve property placeholders on itself when starting. Only properties which are of String type can use property placeholders." },
    "basicPropertyBinding": { "kind": "property", "displayName": "Basic Property Binding", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Whether the component should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities" }
  },
  "properties": {
    "apiName": { "kind": "path", "displayName": "Api Name", "group": "common", "required": true, "type": "object", "javaType": "org.apache.camel.component.linkedin.internal.LinkedInApiName", "enum": [ "comments", "companies", "groups", "jobs", "people", "posts", "search" ], "deprecated": false, "secret": false, "description": "What kind of operation to perform" },
    "methodName": { "kind": "path", "displayName": "Method Name", "group": "common", "required": true, "type": "string", "javaType": "java.lang.String", "enum": [ "addActivity", "addComment", "addCompanyUpdateComment", "addCompanyUpdateCommentAsCompany", "addGroupMembership", "addInvite", "addJob", "addJobBookmark", "addPost", "addShare", "addUpdateComment", "editJob", "flagCategory", "followCompany", "followPost", "getComment", "getCompanies", "getCompanyById", "getCompanyByName", "getCompanyUpdateComments", "getCompanyUpdateLikes", "getCompanyUpdates", "getConnections", "getConnectionsById", "getConnectionsByUrl", "getFollowedCompanies", "getGroup", "getGroupMemberships", "getGroupMembershipSettings", "getHistoricalFollowStatistics", "getHistoricalStatusUpdateStatistics", "getJob", "getJobBookmarks", "getNetworkStats", "getNetworkUpdates", "getNetworkUpdatesById", "getNumberOfFollowers", "getPerson", "getPersonById", "getPersonByUrl", "getPost", "getPostComments", "getPosts", "getStatistics", "getSuggestedCompanies", "getSuggestedGroupPosts", "getSuggestedGroups", "getSuggestedJobs", "getUpdateComments", "getUpdateLikes", "isShareEnabled", "isViewerShareEnabled", "likeCompanyUpdate", "likePost", "likeUpdate", "removeComment", "removeGroupMembership", "removeGroupSuggestion", "removeJob", "removeJobBookmark", "removePost", "searchCompanies", "searchJobs", "searchPeople", "share", "stopFollowingCompany", "updateGroupMembership" ], "deprecated": false, "secret": false, "description": "What sub operation to use for the selected operation" },
    "accessToken": { "kind": "parameter", "displayName": "Access Token", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "LinkedIn access token to avoid username and password login procedure. LinkedIn responds to login forms by using a CAPTCHA. This makes it impossible for a standalone, headless process to log in to LinkedIn by specifying a username and password. To work around this, obtain a LinkedIn access token and provide the token as the setting of the accessToken parameter. Obtaining a LinkedIn access token is a multi-step procedure. You must configure your LinkedIn application, obtain a LinkedIn authorization code, and exchange that code for the LinkedIn access token. For details, see: https://developer.linkedin.com/docs/oauth2 The default behavior is that the access token expires after 60 days. To change this, specify a value for the expiryTime paramter. If the access token expires, the LinkedIn component tries to log in to LinkedIn by providing a username and password, which results in a CAPTCHA so the login fails. The LinkedIn component cannot refresh the access token. You must manually obtain a new access token each time an access token expires. When you update the access token you must restart the application so that it uses the new token." },
    "clientId": { "kind": "parameter", "displayName": "Client Id", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "LinkedIn application client ID" },
    "clientSecret": { "kind": "parameter", "displayName": "Client Secret", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "LinkedIn application client secret" },
    "expiryTime": { "kind": "parameter", "displayName": "Expiry Time", "group": "common", "required": false, "type": "integer", "javaType": "java.lang.Long", "deprecated": false, "secret": false, "description": "A number of milliseconds since the UNIX Epoch. The default is 60 days. A LinkedIn access token expires when this amount of time elapses after the token is in use." },
    "httpParams": { "kind": "parameter", "displayName": "Http Params", "group": "common", "required": false, "type": "object", "javaType": "java.util.Map<java.lang.String,java.lang.Object>", "deprecated": false, "secret": false, "description": "Custom HTTP parameters, for example, proxy host and port. Use constants from AllClientPNames." },
    "inBody": { "kind": "parameter", "displayName": "In Body", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "Sets the name of a parameter to be passed in the exchange In Body" },
    "lazyAuth": { "kind": "parameter", "displayName": "Lazy Auth", "group": "common", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": true, "description": "Flag to enable/disable lazy OAuth, default is true. When enabled, OAuth token retrieval or generation is not done until the first REST call." },
    "redirectUri": { "kind": "parameter", "displayName": "Redirect Uri", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "Application redirect URI, although the component never redirects to this page to avoid having to have a functioning redirect server. For testing, one could use https://localhost." },
    "scopes": { "kind": "parameter", "displayName": "Scopes", "group": "common", "required": false, "type": "object", "javaType": "org.apache.camel.component.linkedin.api.OAuthScope[]", "deprecated": false, "secret": false, "description": "List of LinkedIn scopes as specified at https://developer.linkedin.com/documents/authentication#granting" },
    "secureStorage": { "kind": "parameter", "displayName": "Secure Storage", "group": "common", "required": false, "type": "object", "javaType": "org.apache.camel.component.linkedin.api.OAuthSecureStorage", "deprecated": false, "secret": false, "description": "Callback interface for providing an OAuth token or to store the token generated by the component. The callback should return null on the first call and then save the created token in the saveToken() callback. If the callback returns null the first time, a userPassword MUST be provided." },
    "userName": { "kind": "parameter", "displayName": "User Name", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "LinkedIn user account name, MUST be provided" },
    "userPassword": { "kind": "parameter", "displayName": "User Password", "group": "common", "required": false, "type": "string", "javaType": "java.lang.String", "deprecated": false, "secret": false, "description": "LinkedIn account password" },
    "bridgeErrorHandler": { "kind": "parameter", "displayName": "Bridge Error Handler", "group": "consumer", "label": "consumer", "required": false, "type": "boolean", "javaType": "boolean", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "defaultValue": false, "description": "Allows for bridging the consumer to the Camel routing Error Handler, which mean any exceptions occurred while the consumer is trying to pickup incoming messages, or the likes, will now be processed as a message and handled by the routing Error Handler. By default the consumer will use the org.apache.camel.spi.ExceptionHandler to deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "exceptionHandler": { "kind": "parameter", "displayName": "Exception Handler", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.spi.ExceptionHandler", "optionalPrefix": "consumer.", "deprecated": false, "secret": false, "description": "To let the consumer use a custom ExceptionHandler. Notice if the option bridgeErrorHandler is enabled then this option is not in use. By default the consumer will deal with exceptions, that will be logged at WARN or ERROR level and ignored." },
    "exchangePattern": { "kind": "parameter", "displayName": "Exchange Pattern", "group": "consumer (advanced)", "label": "consumer,advanced", "required": false, "type": "object", "javaType": "org.apache.camel.ExchangePattern", "enum": [ "InOnly", "InOut", "InOptionalOut" ], "deprecated": false, "secret": false, "description": "Sets the exchange pattern when the consumer creates an exchange." },
    "lazyStartProducer": { "kind": "parameter", "displayName": "Lazy Start Producer", "group": "producer", "label": "producer", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Whether the producer should be started lazy (on the first message). By starting lazy you can use this to allow CamelContext and routes to startup in situations where a producer may otherwise fail during starting and cause the route to fail being started. By deferring this startup to be lazy then the startup failure can be handled during routing messages via Camel's routing error handlers. Beware that when the first message is processed then creating and starting the producer may take a little time and prolong the total processing time of the processing." },
    "basicPropertyBinding": { "kind": "parameter", "displayName": "Basic Property Binding", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Whether the endpoint should use basic property binding (Camel 2.x) or the newer property binding with additional capabilities" },
    "synchronous": { "kind": "parameter", "displayName": "Synchronous", "group": "advanced", "label": "advanced", "required": false, "type": "boolean", "javaType": "boolean", "deprecated": false, "secret": false, "defaultValue": false, "description": "Sets whether synchronous processing should be strictly used, or Camel is allowed to use asynchronous processing (if supported)." }
  }
}

